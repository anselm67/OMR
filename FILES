midinorm.py
    Takes a midi stream, normalizes all tracks into one timeline that 
    it cuts it into bars, for alignment with the sheet music.
staffer.py
    Figures out the staves and bars position from a .pdf file. Hopefully
    I can align kern files against image bars and use that for training 
    rather than synthetic data.
midi/ 
    A midi file parser and generator.
kern/
    A kern file parser.
tokenizer.py
    Normalizes a kern file into a .tokens file suitable for training 
    the network. This all infos that are necessary to display a score, 
    and keeeps only the infos required for playback of the score.
    This lead to a massive reduction in the number of tokens (from 20k down
    to 3k) and much less single occurences of tokens too.
    Run it with:
    # python -i kernnorn.py
grandpiano.py
    Loading and prepping the GrandPiano dataset.
model.py    
    The translation model.
train.py
    All train related commands.
kernsheet.py
    A tool to maintain and develop the KernSheet dataset.

    
Building the KernSheet dataset ~/Downloads/KernSheet/:
- *.krn: Original krn files mostly from the KernScore repository, piano only.
- *.pdf: Matching pdf file when available.
these files are computed with various tools:
- *.tokens: The token files to feed the model with, from the .krn with:
    # ./main.py tokenize ~/Downloads/KernSheet
- *.pkl: Cached list of images corresponding to each pages of the pdf
    file, un-transformed, along with the corresponding Page structure.
    # ./staffer staff ~/Downloads/KernSheet

    
Converting a .krn file to pdfm with transposition:

# ./verovio/tools/verovio -r ~/Downloads/verovio/data \
    --transpose m2 \
    ~/dataset/KernSheet/chopin/mazurka/mazurka06-1.krn -o output.svg
# rsvg-convert output.svg -f pdf -o output-m2.pdf

Converting a music xml file to .krn then to.pdf:
# ./verovio/tools/verovio -r ~/Downloads/verovio/data \
    -f musicxml-hum -t hum bwv_846.musicxml
# ./verovio/tools/verovio -r ~/Downloads/verovio/data \
    bwv_846.krn -o output.svg
# rsvg-convert output.svg -f pdf -o output.pdf
